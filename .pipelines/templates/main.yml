jobs:
- job: main
  templateContext:
    isProduction: false
    inputs:
    - input: pipelineArtifact
      pipeline: 'pod'
      artifactName: 'ios_packaging_artifacts_full'
      targetPath: '$(Build.ArtifactStagingDirectory)/ios_packaging_artifacts_full'    
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'
  - task: PipAuthenticate@1
    displayName: 'Pip Authenticate'
    inputs:
      artifactFeeds: 'Lotus'
  - script: |
      set -e -x
      POD_ARCHIVE=$(find . -name "pod-archive-onnxruntime-objc*.zip")
      unzip ${POD_ARCHIVE} -d unzipped
      cp -rf unzipped/objectivec/ $(Build.SourcesDirectory)/objectivec/
    workingDirectory: '$(Build.ArtifactStagingDirectory)/$(artifactsName)'
    displayName: Copy latest dev version ORT objectivec/ source files

  # copy the pod archive to a path relative to Package.swift and set the env var required by Package.swift to use that.
  # xcodebuild will implicitly use Package.swift and build/run the .testTarget (tests in swift/onnxTests).
  # once that's done cleanup the copy of the pod zip file
  - script: |
      set -e -x
      cd "$(Build.ArtifactStagingDirectory)/$(artifactsName)"
      POD_ARCHIVE=$(find . -name "pod-archive-onnxruntime-c*.zip")

      shasum -a 256 "$(Build.ArtifactStagingDirectory)/$(artifactsName)/${POD_ARCHIVE}"

      cd "$(Build.SourcesDirectory)"
      cp "$(Build.ArtifactStagingDirectory)/$(artifactsName)/${POD_ARCHIVE}" swift/
      export ORT_POD_LOCAL_PATH="swift/${POD_ARCHIVE}"
      xcodebuild test -scheme onnxruntime-Package -destination 'platform=iOS Simulator,name=iPhone 14'

      xcodebuild test -scheme onnxruntime-Package -destination 'platform=macosx'
        
      rm swift/pod-archive-onnxruntime-c-*.zip
    workingDirectory: "$(Build.SourcesDirectory)"
    displayName: "Print ORT iOS Pod checksum and Test Package.swift usage"